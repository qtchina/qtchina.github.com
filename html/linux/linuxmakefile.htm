<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html><!-- InstanceBegin template="/Templates/contenttpl.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<META name="keywords" content="Linux,document,Open Source,GNU,icephoton,C/C++,PHP,QT/KDE自由软件,资料,文档">
<!-- InstanceBeginEditable name="doctitle" -->
<title>icephoton 笔记</title>
<!-- InstanceEndEditable -->
<!-- InstanceBeginEditable name="head" -->
<!-- InstanceEndEditable -->
<script language="javascript">

</script>
</head>

<body>
<a name="pagetop"></a>
<br>
<table width="90%" border="1"  align="center">
  <tr>
    <td width="359">&nbsp;&nbsp;&nbsp;&nbsp;本站内容为本人在工作与学习过程中收集及组织的一些文档资料，方便随时查阅。</td>
  </tr>
</table>
<br>
<hr align="center"  size="1" width="96%" >

<p align="right">
<a href="../index.htm">回首页</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

</p>

<table width="90%"  border="1" align="center">
  <tr>
    <td style="line-height:20px;color:#333333;font-size:14px;padding:15px 30px 15px 30px" bgcolor="#F7F7F7">&nbsp;

<!-- InstanceBeginEditable name="content" -->

Makefile是什么东西？<br>有哪些步骤？<br>每步都有什么目的？<br><br>序。&nbsp;  Makefile 是什么？<br>&nbsp;  Makefile是用于自动编译和链接的，一个工程有很多文件组成，每一个文件的改变都会导致工程的重新链接，但是不是所有的文件都需要重新编译，Makefile中纪录有文件的信息，在make时会决定在链接的时候需要重新编译哪些文件。<br><br>　　Makefile的宗旨就是：让编译器知道要编译一个文件需要依赖其他的哪些文件。当那些依赖文件有了改变，编译器会自动的发现最终的生成文件已经过时，而重新编译相应的模块。<br><br>　　Makefile的基本结构不是很复杂，但当一个程序开发人员开始写Makefile时，经常会怀疑自己写的是否符合惯例，而且自己写的Makefile经常和自己的开发环境相关联，当系统环境变量或路径发生了变化后，Makefile可能还要跟着修改。这样就造成了手工书写Makefile的诸多问题，automake恰好能很好地帮助我们解决这些问题。<br><br>　　使用automake，程序开发人员只需要写一些简单的含有预定义宏的文件，由autoconf根据一个宏文件生成configure，由automake根据另一个宏文件生成Makefile.in，再使用configure依据Makefile.in来生成一个符合惯例的Makefile。下面我们将详细介绍Makefile的automake生成方法。<br><br> 一。Makefile 编写工具链介绍<br><br>&nbsp; automake,autoconf,autoscan,aclocal<br>&nbsp; <br>&nbsp; <a href=http://www.linuxforum.net/books/autoconf.html target=_blank>autoconf(2.13)中文手册</a><br>&nbsp; <a href=http://www.linuxforum.net/books/automake.html target=_blank>GNU Automake(1.3, 3)中文手册</a><br><br><br> 二。编写步骤<br><br>&nbsp;  1。为各目录(包括根目录和所有子目录)编写Makefile.am文件<br>&nbsp; &nbsp; &nbsp; 一些说明的地方，即Makefile.am应该怎么写。<br><br>&nbsp; &nbsp; &nbsp; ksou/Makefile.am模板：<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  EXTRA_DIST = BUGS ChangeLog.O<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  SUBDIRS =&nbsp; &nbsp; src <br><br>&nbsp; &nbsp; &nbsp; ksou/src/Makefile.am 模板：<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; AUTOMAKE_OPTIONS = foreign<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; bin_PROGRAMS = ksou<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ksou_SOURCES = main.cpp ksou.h <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ksou_LDADD = $(INTLLIBS) $(ALLOCA)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; localedir = $(datadir)/locale<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; INCLUDES = -I../intl -DLOCALEDIR=\&quot;$(localedir)\&quot;<br>&nbsp;  2。执行autoscan以生成Configure.in 的模板 Configure.scan<br>&nbsp; &nbsp;  假设目录结构如下所示<br>&nbsp; &nbsp;  ksou/&nbsp; 项目根目录<br>&nbsp; &nbsp;  ksou/src&nbsp; 源程序目录<br>&nbsp; &nbsp;  ksou/src/main.cpp&nbsp; 入口main 所在文件<br>&nbsp; &nbsp;  ksou/src/ksou.h&nbsp; &nbsp; 某个头文件<br>&nbsp; &nbsp;  要求：这两个源文件要能输出hello world 吧。:)<br>&nbsp; &nbsp;  <br>&nbsp; &nbsp;  sh&gt; autoscan<br>&nbsp; &nbsp;  sh&gt; ls<br>&nbsp; &nbsp; &nbsp; &nbsp; autoscan-2.5x.log&nbsp; configure.scan&nbsp; src<br>&nbsp; &nbsp;  sh&gt;mv configure.scan configure.in<br>&nbsp; &nbsp;  用你喜欢的编辑器编辑configure.in文件<br>&nbsp; &nbsp;  一些要说明的宏<br><br>&nbsp; &nbsp;  简单的configure.in模板：<br>&nbsp; &nbsp; &nbsp; &nbsp;  #&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  -*- Autoconf -*-<br>&nbsp; &nbsp; &nbsp; &nbsp;  # Process this file with autoconf to produce a configure script.<br>&nbsp; &nbsp; &nbsp; &nbsp;  <br>&nbsp; &nbsp; &nbsp; &nbsp;  AC_PREREQ(2.59)<br>&nbsp; &nbsp; &nbsp; &nbsp;  <br>&nbsp; &nbsp; &nbsp; &nbsp;  AC_INIT(<i>ksou</i>, <i>0.1</i>, <i>jason@ksou.org</i>)<br>&nbsp; &nbsp; &nbsp; &nbsp;  AM_INIT_AUTOMAKE(<i>1.6.1</i>)<br>&nbsp; &nbsp; &nbsp; &nbsp;  <br>&nbsp; &nbsp; &nbsp; &nbsp;  AC_CONFIG_SRCDIR([src/ksou.h])<br>&nbsp; &nbsp; &nbsp; &nbsp;  AC_CONFIG_HEADER([src/config.h])<br>&nbsp; &nbsp; &nbsp; &nbsp;  <br>&nbsp; &nbsp; &nbsp; &nbsp;  <br>&nbsp; &nbsp; &nbsp; &nbsp;  <br>&nbsp; &nbsp; &nbsp; &nbsp;  # Checks for programs.<br>&nbsp; &nbsp; &nbsp; &nbsp;  AC_PROG_CXX<br>&nbsp; &nbsp; &nbsp; &nbsp;  #AC_PROG_CC<br>&nbsp; &nbsp; &nbsp; &nbsp;  <br>&nbsp; &nbsp; &nbsp; &nbsp;  # Checks for libraries.<br>&nbsp; &nbsp; &nbsp; &nbsp;  <br>&nbsp; &nbsp; &nbsp; &nbsp;  # Checks for header files.<br>&nbsp; &nbsp; &nbsp; &nbsp;  AC_HEADER_STDC<br>&nbsp; &nbsp; &nbsp; &nbsp;  AC_CHECK_HEADERS([stdlib.h])<br>&nbsp; &nbsp; &nbsp; &nbsp;  <br>&nbsp; &nbsp; &nbsp; &nbsp;  # Checks for typedefs, structures, and compiler characteristics.<br>&nbsp; &nbsp; &nbsp; &nbsp;  <br>&nbsp; &nbsp; &nbsp; &nbsp;  # Checks for library functions.<br>&nbsp; &nbsp; &nbsp; &nbsp;  <br>&nbsp; &nbsp; &nbsp; &nbsp;  AC_CONFIG_FILES([<i>Makefile</i> <i>src/Makefil</i>e])<br>&nbsp; &nbsp; &nbsp; &nbsp;  AC_OUTPUT<br><br>&nbsp;  3。执行aclocal以生成aclocal.m4<br>&nbsp; &nbsp;  sh&gt; aclocal<br>&nbsp; &nbsp;  sh&gt; ls<br>&nbsp; &nbsp; &nbsp; &nbsp; aclocal.m4&nbsp; autom4te.cache&nbsp; autoscan-2.5x.log&nbsp; configure.in&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; src<br><br>&nbsp;  4。执行autoconf 以生成Configure脚本<br>&nbsp; &nbsp;  sh&gt; autoconf<br>&nbsp; &nbsp;  sh&gt; ls<br>&nbsp; &nbsp; &nbsp; &nbsp; aclocal.m4&nbsp; autom4te.cache&nbsp; autoscan-2.5x.log&nbsp; configure <br>&nbsp; &nbsp; &nbsp; &nbsp; configure.in&nbsp;  src<br><br><br><br>&nbsp;  5。在你指定的地方加上config.h.in模板，这个是在根目录的 configure.in中指定的。它将在automake的时候生成config.h,生成一个与程序相关的宏定义以供程序使用。<br><br>&nbsp; &nbsp; config.h.in模板：<br>&nbsp; &nbsp; &nbsp; &nbsp; /* src/config.h.in.&nbsp; Generated from configure.in by autoheader.&nbsp; */<br>&nbsp; &nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; /* Define to 1 if you have the &lt;inttypes.h&gt; header file. */<br>&nbsp; &nbsp; &nbsp; &nbsp; #undef HAVE_INTTYPES_H<br>&nbsp; &nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; /* Define to 1 if you have the &lt;memory.h&gt; header file. */<br>&nbsp; &nbsp; &nbsp; &nbsp; #undef HAVE_MEMORY_H<br>&nbsp; &nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; /* Define to 1 if you have the &lt;stdint.h&gt; header file. */<br>&nbsp; &nbsp; &nbsp; &nbsp; #undef HAVE_STDINT_H<br>&nbsp; &nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; /* Define to 1 if you have the &lt;stdlib.h&gt; header file. */<br>&nbsp; &nbsp; &nbsp; &nbsp; #undef HAVE_STDLIB_H<br>&nbsp; &nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; /* Define to 1 if you have the &lt;strings.h&gt; header file. */<br>&nbsp; &nbsp; &nbsp; &nbsp; #undef HAVE_STRINGS_H<br>&nbsp; &nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; /* Define to 1 if you have the &lt;string.h&gt; header file. */<br>&nbsp; &nbsp; &nbsp; &nbsp; #undef HAVE_STRING_H<br>&nbsp; &nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; /* Define to 1 if you have the &lt;sys/stat.h&gt; header file. */<br>&nbsp; &nbsp; &nbsp; &nbsp; #undef HAVE_SYS_STAT_H<br>&nbsp; &nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; /* Define to 1 if you have the &lt;sys/types.h&gt; header file. */<br>&nbsp; &nbsp; &nbsp; &nbsp; #undef HAVE_SYS_TYPES_H<br>&nbsp; &nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; /* Define to 1 if you have the &lt;unistd.h&gt; header file. */<br>&nbsp; &nbsp; &nbsp; &nbsp; #undef HAVE_UNISTD_H<br>&nbsp; &nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; /* Name of package */<br>&nbsp; &nbsp; &nbsp; &nbsp; #undef PACKAGE<br>&nbsp; &nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; /* Define to the address where bug reports for this package should be sent. */<br>&nbsp; &nbsp; &nbsp; &nbsp; #undef PACKAGE_BUGREPORT<br>&nbsp; &nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; /* Define to the full name of this package. */<br>&nbsp; &nbsp; &nbsp; &nbsp; #undef PACKAGE_NAME<br>&nbsp; &nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; /* Define to the full name and version of this package. */<br>&nbsp; &nbsp; &nbsp; &nbsp; #undef PACKAGE_STRING<br>&nbsp; &nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; /* Define to the one symbol short name of this package. */<br>&nbsp; &nbsp; &nbsp; &nbsp; #undef PACKAGE_TARNAME<br>&nbsp; &nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; /* Define to the version of this package. */<br>&nbsp; &nbsp; &nbsp; &nbsp; #undef PACKAGE_VERSION<br>&nbsp; &nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; /* Define to 1 if you have the ANSI C header files. */<br>&nbsp; &nbsp; &nbsp; &nbsp; #undef STDC_HEADERS<br>&nbsp; &nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; /* Version number of package */<br>&nbsp; &nbsp; &nbsp; &nbsp; #undef VERSION<br><br>		<br><br><br>&nbsp;  6。执行automake生成Makefile<br>&nbsp; &nbsp;  sh&gt; automake --add-missing<br>&nbsp; &nbsp;  有可能出现下面输出：<br>&nbsp; &nbsp; &nbsp; &nbsp; Makefile.am: required file `./NEWS' not found<br>&nbsp; &nbsp; &nbsp; &nbsp; Makefile.am: required file `./README' not found<br>&nbsp; &nbsp; &nbsp; &nbsp; Makefile.am: required file `./AUTHORS' not found<br>&nbsp; &nbsp; &nbsp; &nbsp; Makefile.am: required file `./ChangeLog' not found<br>&nbsp; &nbsp;  手工创建这些文件即可，即使为空文件也成。再次执行automake --add-missing看是否还会有什么错误。如果没有，则有如果结果：<br>&nbsp; &nbsp;  sh&gt; ls<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; total 221<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lrwxrwxrwx&nbsp; 1 jason None&nbsp; &nbsp;  31 Jul 23 17:28 COPYING -&gt; /usr/share/automake-1.9/COPYING<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lrwxrwxrwx&nbsp; 1 jason None&nbsp; &nbsp;  31 Jul 23 17:28 INSTALL -&gt; /usr/share/automake-1.9/INSTALL<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -rw-r--r--&nbsp; 1 jason None&nbsp; &nbsp;  13 Jul 23 17:26 Makefile.am<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -rw-r--r--&nbsp; 1 jason None&nbsp; &nbsp; &nbsp; 0 Jul 23 17:26 Makefile.am.bak<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -rw-r--r--&nbsp; 1 jason None&nbsp; 31120 Jul 23 17:22 aclocal.m4<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; drwxr-xr-x&nbsp; 2 jason None&nbsp; &nbsp; &nbsp; 0 Jul 23 17:22 autom4te.cache<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -rw-r--r--&nbsp; 1 jason None&nbsp; &nbsp; &nbsp; 0 Jul 23 17:17 autoscan-2.5x.log<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -rwxr-xr-x&nbsp; 1 jason None 163385 Jul 23 17:23 configure<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -rw-r--r--&nbsp; 1 jason None&nbsp; &nbsp; 573 Jul 23 17:21 configure.in<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -rw-r--r--&nbsp; 1 jason None&nbsp; &nbsp; 546 Jul 23 17:21 configure.in.bak<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lrwxrwxrwx&nbsp; 1 jason None&nbsp; &nbsp;  31 Jul 23 17:28 depcomp -&gt; /usr/share/automake-1.9/depcomp<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lrwxrwxrwx&nbsp; 1 jason None&nbsp; &nbsp;  34 Jul 23 17:28 install-sh -&gt; /usr/share/automake-1.9/install-sh<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lrwxrwxrwx&nbsp; 1 jason None&nbsp; &nbsp;  31 Jul 23 17:28 missing -&gt; /usr/share/automake-1.9/missing<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; drwxr-xr-x&nbsp; 2 jason None&nbsp; &nbsp; &nbsp; 0 Jul 23 16:42 src<br>&nbsp; &nbsp; &nbsp;  是不是感觉到已经有经常使用的./configure ; make ; make install ; 的模样了呢？其实这就是了。下面就可以这套半自动化工具链的成果了。<br><br>&nbsp;  7。使用<br>&nbsp; &nbsp;  就和安装其他软件一样了、<br>&nbsp; &nbsp;  sh&gt; ./configure<br>&nbsp; &nbsp;  sh&gt; make<br>&nbsp; &nbsp;  sh&gt; make install<br><br>&nbsp; 有没有生成你想要的东西呢？试试吧。下面是我的：<br>&nbsp; &nbsp;  sh&gt; ls src<br>&nbsp; &nbsp; &nbsp; &nbsp; Makefile&nbsp; &nbsp; &nbsp;  config.h&nbsp; &nbsp;  ksou.exe&nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; main.cpp&nbsp; stamp-h1 akefile.am&nbsp; Makefile.in&nbsp; &nbsp; &nbsp; <br>&nbsp; &nbsp; &nbsp; &nbsp; config.h.in&nbsp; ksou.h&nbsp; &nbsp; main.o<br>&nbsp; &nbsp;  sh&gt; src/ksou.exe<br>&nbsp; &nbsp; &nbsp; &nbsp; HELLO WORLD <br>&nbsp;  我用的是windows下的cygwin环境下做的测试,所以生成的执行文件为ksou.exe,如果在linux下面，生成的程序一般不需要带后缀名exe(即为ksou),不过也是能执行的呀。<br><br>三。各步骤详解<br>&nbsp; <br><br>四。处理新扩展名文件<br><br>&nbsp; 在C/C++项目中， 我们赏需要涉及其他扩展名的文件，如在proc*c/c++ 中，它使用的扩展名为.pc，还有时候需要处理java文件，这种情况automake 能处理的了吗？当然，答案是肯定的。<br><br>&nbsp; 首先，需要使用到automake的SUFFIXES变量，它是在automake 系统中表示能处理的文件的扩展名的。<br><br>&nbsp; 在Makefile.am文件中写入下面几行：<br>&nbsp;  SUFFIXES = .pc .cpp<br>&nbsp;  .pc.cpp:<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $(PROCPP) XXXXparamsXXXXX <br>&nbsp; 然后运行一下automake.看看结果怎么样。<br> <br>



<!-- InstanceEndEditable -->
	</td>
  </tr>
</table>

<p align="right">
	<a href="../index.htm">回首页</a>&nbsp;&nbsp;&nbsp;&nbsp;
	<a href="#pagetop">TOP</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</p>
<hr align="center"  size="1" width="96%" >
<center>Copyleft &copy;IcePhoton 2000 - 2005, 北京</center>


</body>
<!-- InstanceEnd --></html>
